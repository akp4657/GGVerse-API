generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Discord_Threads {
  id         Int      @id(map: "Discord_Threads_pkey1") @default(autoincrement())
  ThreadId   String   @db.VarChar
  Members    Int[]
  Open       Boolean  @default(true)
  Dispute    Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lookup_Badge {
  id          Int     @id @default(autoincrement())
  Name        String? @db.VarChar
  Description String? @db.VarChar
  Icon        String? @db.VarChar
  Color       String? @db.VarChar
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lookup_Game {
  id            Int             @id(map: "Lookup_Games_pkey") @default(autoincrement())
  Game          String?
  API           String?         @db.VarChar
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  Match_History Match_History[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lookup_PaymentType {
  id         Int      @id @default(autoincrement())
  Type       String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Users      Users[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lookup_Status {
  id            Int             @id @default(autoincrement())
  Status        String?
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  Match_History Match_History[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Match_History {
  id                            Int            @id(map: "Discord_Threads_pkey") @default(autoincrement())
  Game                          Int?
  P1                            Int?
  P2                            Int?
  Status                        Int?
  Result                        Boolean?
  created_at                    DateTime       @default(now()) @db.Timestamptz(6)
  PointDiff                     Int?
  RivalryHeat                   Float?         @default(0)
  BetAmount                     Decimal?       @db.Decimal
  Lookup_Game                   Lookup_Game?   @relation(fields: [Game], references: [id], onDelete: Cascade)
  Users_Match_History_P1ToUsers Users?         @relation("Match_History_P1ToUsers", fields: [P1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users_Match_History_P2ToUsers Users?         @relation("Match_History_P2ToUsers", fields: [P2], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Lookup_Status                 Lookup_Status? @relation(fields: [Status], references: [id], onDelete: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Users {
  id                                        Int                @id(map: "Test-User-Table_pkey") @default(autoincrement())
  Username                                  String?
  Rank                                      Int?
  Wallet                                    Int                @default(0)
  PaymentType                               Int                @default(1)
  PayPalPayerId                             String?            @db.VarChar
  BillingAgreementId                        String?            @db.VarChar
  CardLast                                  Decimal?           @db.Decimal
  CardBrand                                 String?            @db.VarChar
  CardExpMonth                              Decimal?           @db.Decimal
  CardExpYear                               Decimal?           @db.Decimal
  Rivals                                    Int[]
  Badges                                    Int[]
  Discord                                   String?            @db.VarChar
  Avatar                                    String?            @db.VarChar
  Authenticated                             Boolean            @default(false)
  Password                                  String?            @db.VarChar
  Email                                     String?            @unique @db.VarChar
  WinsLosses                                Json?              @db.Json
  Streak                                    Int?               @default(0)
  Earnings                                  Int?
  JWT                                       String?            @db.VarChar
  Active                                    Boolean?           @default(true)
  MMI                                       Float?             @default(1000)
  LastMMIUpdate                             DateTime?
  Online                                    Boolean?           @default(false)
  Gamertag                                  String?            @db.VarChar
  Challenges_Challenges_ChallengedIdToUsers Challenges[]       @relation("Challenges_ChallengedIdToUsers")
  Challenges_Challenges_ChallengerIdToUsers Challenges[]       @relation("Challenges_ChallengerIdToUsers")
  Match_History_Match_History_P1ToUsers     Match_History[]    @relation("Match_History_P1ToUsers")
  Match_History_Match_History_P2ToUsers     Match_History[]    @relation("Match_History_P2ToUsers")
  Transactions                              Transaction[]
  Lookup_PaymentType                        Lookup_PaymentType @relation(fields: [PaymentType], references: [id], onDelete: SetDefault)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Transaction {
  id                    Int      @id @default(autoincrement())
  UserId                Int
  Type                  String   @db.VarChar
  Amount                Decimal  @db.Decimal
  Currency              String   @default("USD") @db.VarChar
  Description           String?  @db.VarChar
  StripePaymentIntentId String?  @db.VarChar
  StripePayoutId        String?  @db.VarChar
  Status                String   @default("completed") @db.VarChar
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  Users                 Users    @relation(fields: [UserId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Challenges {
  id               Int      @id @default(autoincrement())
  ChallengerId     Int
  ChallengedId     Int
  Game             String   @db.VarChar
  Wager            Decimal  @db.Decimal
  Status           String   @default("pending") @db.VarChar
  CreatedAt        DateTime @default(now()) @db.Timestamptz(6)
  ExpiresAt        DateTime @db.Timestamptz(6)
  DiscordThreadId  String?  @db.VarChar
  DiscordThreadUrl String?  @db.VarChar
  Challenged       Users    @relation("Challenges_ChallengedIdToUsers", fields: [ChallengedId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Challenges_challengedId_fkey")
  Challenger       Users    @relation("Challenges_ChallengerIdToUsers", fields: [ChallengerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Challenges_challengerId_fkey")

  @@index([ChallengedId], map: "Challenges_challengedId_idx")
  @@index([ChallengerId], map: "Challenges_challengerId_idx")
  @@index([CreatedAt], map: "Challenges_createdAt_idx")
  @@index([Status], map: "Challenges_status_idx")
}
